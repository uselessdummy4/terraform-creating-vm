name: Terraform Safe Cleanup

on:
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # 3️⃣ Terminate EC2 Instances
      - name: Delete EC2 Instances
        run: |
          for NAME in web-1 web-2; do
            INSTANCE_IDS=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=$NAME" \
              --query "Reservations[].Instances[].InstanceId" --output text)
            if [ -n "$INSTANCE_IDS" ]; then
              echo "Terminating instance(s) $NAME: $INSTANCE_IDS"
              aws ec2 terminate-instances --instance-ids $INSTANCE_IDS
              aws ec2 wait instance-terminated --instance-ids $INSTANCE_IDS
              echo "$NAME terminated"
            else
              echo "No instance found with name $NAME"
            fi
          done

      # 4️⃣ Delete Security Group (after EC2 is gone)
      - name: Delete Security Group
        run: |
          SG_ID=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=ssh-sg" \
            --query "SecurityGroups[].GroupId" --output text)
          if [ -n "$SG_ID" ]; then
            echo "Deleting Security Group ssh-sg ($SG_ID)"
            aws ec2 delete-security-group --group-id $SG_ID
          else
            echo "Security Group ssh-sg not found"
          fi

      # 5️⃣ Disassociate and Delete Route Table
      - name: Delete Route Table Association & Table
        run: |
          SUBNET_ID=$(aws ec2 describe-subnets \
            --filters "Name=tag:Name,Values=main-subnet" \
            --query "Subnets[].SubnetId" --output text)
          RT_ID=$(aws ec2 describe-route-tables \
            --filters "Name=tag:Name,Values=public-rt" \
            --query "RouteTables[].RouteTableId" --output text)
          
          # Disassociate
          ASSOCIATIONS=$(aws ec2 describe-route-tables \
            --route-table-ids $RT_ID \
            --query "RouteTables[].Associations[].RouteTableAssociationId" --output text)
          for ASSOC in $ASSOCIATIONS; do
            aws ec2 disassociate-route-table --association-id $ASSOC
            echo "Disassociated $ASSOC"
          done
          
          # Delete route table
          if [ -n "$RT_ID" ]; then
            aws ec2 delete-route-table --route-table-id $RT_ID
            echo "Deleted route table $RT_ID"
          fi

      # 6️⃣ Delete Internet Gateway
      - name: Delete Internet Gateway
        run: |
          IGW_ID=$(aws ec2 describe-internet-gateways \
            --filters "Name=tag:Name,Values=main-igw" \
            --query "InternetGateways[].InternetGatewayId" --output text)
          if [ -n "$IGW_ID" ]; then
            VPC_ID=$(aws ec2 describe-internet-gateways --internet-gateway-ids $IGW_ID \
                     --query "InternetGateways[0].Attachments[0].VpcId" --output text)
            if [ -n "$VPC_ID" ]; then
              aws ec2 detach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID
            fi
            aws ec2 delete-internet-gateway --internet-gateway-id $IGW_ID
            echo "Deleted IGW $IGW_ID"
          else
            echo "Internet Gateway not found"
          fi

      # 7️⃣ Delete Subnet
      - name: Delete Subnet
        run: |
          SUBNET_ID=$(aws ec2 describe-subnets \
            --filters "Name=tag:Name,Values=main-subnet" \
            --query "Subnets[].SubnetId" --output text)
          if [ -n "$SUBNET_ID" ]; then
            aws ec2 delete-subnet --subnet-id $SUBNET_ID
            echo "Deleted subnet $SUBNET_ID"
          else
            echo "Subnet not found"
          fi

      # 8️⃣ Delete VPC
      - name: Delete VPC
        run: |
          VPC_ID=$(aws ec2 describe-vpcs \
            --filters "Name=tag:Name,Values=main-vpc" \
            --query "Vpcs[].VpcId" --output text)
          if [ -n "$VPC_ID" ]; then
            aws ec2 delete-vpc --vpc-id $VPC_ID
            echo "Deleted VPC $VPC_ID"
          else
            echo "VPC not found"
          fi

      # 9️⃣ Delete Key Pair
      - name: Delete Key Pair
        run: |
          KEY_NAME="host-tf"
          aws ec2 delete-key-pair --key-name $KEY_NAME || echo "Key pair $KEY_NAME does not exist"
